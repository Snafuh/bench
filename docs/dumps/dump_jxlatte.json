[{"test_id": "alpha_nonpremultiplied", "cmd": ["python3", "scripts/wrap_png.py", "--decoder", "java -jar ./third_party/jxlatte/build/java/jxlatte.jar %s %s --png-depth=16", "./third_party/conformance/testcases/alpha_nonpremultiplied/input.jxl", "/tmp/alpha_nonpremultiplieduxm8sxfn/decoded_image.npy", "--metadata_out", "/tmp/alpha_nonpremultiplieduxm8sxfn/meta.json", "--icc_out", "/tmp/alpha_nonpremultiplieduxm8sxfn/decoded.icc", "--norender_spotcolors"], "exact_tests": [], "check_meta": {"success": true}, "num_frames": 1, "frame0_compare_npy": {"success": true, "actual_peak_error": 7.647764785567723e-06, "actual_rmses": [3.1141718565266937e-06, 4.403638214413188e-06, 4.403638214413188e-06, 4.4037712373882315e-06], "actual_rmse": 4.4037712373882315e-06, "rmse_limit": 6.1035e-05, "peak_error": 6.1035e-05}, "success": true}, {"test_id": "alpha_triangles", "cmd": ["python3", "scripts/wrap_png.py", "--decoder", "java -jar ./third_party/jxlatte/build/java/jxlatte.jar %s %s --png-depth=16", "./third_party/conformance/testcases/alpha_triangles/input.jxl", "/tmp/alpha_triangleskub4kcid/decoded_image.npy", "--metadata_out", "/tmp/alpha_triangleskub4kcid/meta.json", "--icc_out", "/tmp/alpha_triangleskub4kcid/decoded.icc", "--norender_spotcolors"], "exact_tests": [], "check_meta": {"success": true}, "num_frames": 1, "frame0_compare_npy": {"success": true, "actual_peak_error": 7.62939453125e-06, "actual_rmses": [3.8094817427543906e-06, 4.400079979339908e-06, 3.809474253354954e-06, 0.0], "actual_rmse": 4.400079979339908e-06, "rmse_limit": 0.001953125, "peak_error": 0.001953125}, "success": true}, {"test_id": "animation_icos4d_5", "cmd": ["python3", "scripts/wrap_png.py", "--decoder", "java -jar ./third_party/jxlatte/build/java/jxlatte.jar %s %s --png-depth=16", "./third_party/conformance/testcases/animation_icos4d_5/input.jxl", "/tmp/animation_icos4d_5r6z70ph1/decoded_image.npy", "--metadata_out", "/tmp/animation_icos4d_5r6z70ph1/meta.json", "--icc_out", "/tmp/animation_icos4d_5r6z70ph1/decoded.icc", "--norender_spotcolors"], "exact_tests": [], "check_meta": {"success": false, "message": "Malformed metadata file"}, "num_frames": 48, "frame0_compare_npy": {"success": false, "message": "RMSE too large: 0.31927086210641803 > 0.02", "actual_peak_error": 1.0, "actual_rmses": [0.1595994319289372, 0.2372271325409785, 0.31927086210641803, 0.1206445523284727], "actual_rmse": 0.31927086210641803, "rmse_limit": 0.02, "peak_error": 0.06}, "frame1_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame2_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame3_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame4_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame5_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame6_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame7_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame8_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame9_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame10_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame11_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame12_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame13_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame14_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame15_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame16_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame17_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame18_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame19_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame20_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame21_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame22_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame23_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame24_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame25_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame26_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame27_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame28_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame29_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame30_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame31_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame32_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame33_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame34_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame35_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame36_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame37_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame38_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame39_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame40_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame41_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame42_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame43_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame44_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame45_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame46_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame47_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "success": false}, {"test_id": "animation_newtons_cradle", "cmd": ["python3", "scripts/wrap_png.py", "--decoder", "java -jar ./third_party/jxlatte/build/java/jxlatte.jar %s %s --png-depth=16", "./third_party/conformance/testcases/animation_newtons_cradle/input.jxl", "/tmp/animation_newtons_cradle7nylju6p/decoded_image.npy", "--metadata_out", "/tmp/animation_newtons_cradle7nylju6p/meta.json", "--icc_out", "/tmp/animation_newtons_cradle7nylju6p/decoded.icc", "--norender_spotcolors"], "exact_tests": [], "check_meta": {"success": false, "message": "Malformed metadata file"}, "num_frames": 36, "frame0_compare_npy": {"success": false, "message": "RMSE too large: 0.03334243305469183 > 0.000976562", "actual_peak_error": 0.7529412358999252, "actual_rmses": [0.03334243305469183, 0.03333722239524507, 0.0333316691505737, 0.0], "actual_rmse": 0.03334243305469183, "rmse_limit": 0.000976562, "peak_error": 0.000976562}, "frame1_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame2_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame3_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame4_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame5_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame6_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame7_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame8_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame9_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame10_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame11_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame12_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame13_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame14_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame15_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame16_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame17_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame18_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame19_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame20_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame21_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame22_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame23_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame24_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame25_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame26_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame27_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame28_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame29_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame30_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame31_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame32_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame33_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame34_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame35_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "success": false}, {"test_id": "animation_spline_5", "cmd": ["python3", "scripts/wrap_png.py", "--decoder", "java -jar ./third_party/jxlatte/build/java/jxlatte.jar %s %s --png-depth=16", "./third_party/conformance/testcases/animation_spline_5/input.jxl", "/tmp/animation_spline_5u3o47nmf/decoded_image.npy", "--metadata_out", "/tmp/animation_spline_5u3o47nmf/meta.json", "--icc_out", "/tmp/animation_spline_5u3o47nmf/decoded.icc", "--norender_spotcolors"], "exact_tests": [], "check_meta": {"success": false, "message": "Malformed metadata file"}, "num_frames": 60, "frame0_compare_npy": {"success": false, "message": "RMSE too large: 0.04572450028561267 > 0.02", "actual_peak_error": 0.9484766721725464, "actual_rmses": [0.04572450028561267, 0.023673969865635382, 0.025558447858626758], "actual_rmse": 0.04572450028561267, "rmse_limit": 0.02, "peak_error": 0.06}, "frame1_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame2_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame3_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame4_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame5_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame6_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame7_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame8_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame9_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame10_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame11_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame12_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame13_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame14_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame15_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame16_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame17_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame18_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame19_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame20_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame21_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame22_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame23_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame24_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame25_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame26_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame27_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame28_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame29_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame30_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame31_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame32_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame33_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame34_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame35_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame36_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame37_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame38_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame39_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame40_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame41_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame42_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame43_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame44_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame45_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame46_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame47_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame48_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame49_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame50_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame51_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame52_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame53_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame54_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame55_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame56_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame57_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame58_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame59_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "success": false}, {"test_id": "bench_oriented_brg_5", "cmd": ["python3", "scripts/wrap_png.py", "--decoder", "java -jar ./third_party/jxlatte/build/java/jxlatte.jar %s %s --png-depth=16", "./third_party/conformance/testcases/bench_oriented_brg_5/input.jxl", "/tmp/bench_oriented_brg_56yr93p99/decoded_image.npy", "--metadata_out", "/tmp/bench_oriented_brg_56yr93p99/meta.json", "--icc_out", "/tmp/bench_oriented_brg_56yr93p99/decoded.icc", "--norender_spotcolors"], "exact_tests": [], "check_meta": {"success": true}, "num_frames": 1, "frame0_compare_npy": {"success": true, "actual_peak_error": 9.147009642496151e-06, "actual_rmses": [4.414543677447756e-06, 4.4169404589738855e-06, 4.411705434541874e-06], "actual_rmse": 4.4169404589738855e-06, "rmse_limit": 0.02, "peak_error": 0.06}, "success": true}, {"test_id": "bicycles", "cmd": ["python3", "scripts/wrap_png.py", "--decoder", "java -jar ./third_party/jxlatte/build/java/jxlatte.jar %s %s --png-depth=16", "./third_party/conformance/testcases/bicycles/input.jxl", "/tmp/bicyclesunh0kb14/decoded_image.npy", "--metadata_out", "/tmp/bicyclesunh0kb14/meta.json", "--icc_out", "/tmp/bicyclesunh0kb14/decoded.icc", "--norender_spotcolors"], "exact_tests": [], "check_meta": {"success": true}, "num_frames": 1, "frame0_compare_npy": {"success": true, "actual_peak_error": 9.298324584960938e-06, "actual_rmses": [4.392198092160434e-06, 4.403363299893452e-06, 4.390801986443036e-06], "actual_rmse": 4.403363299893452e-06, "rmse_limit": 0.000976562, "peak_error": 0.000976562}, "success": true}, {"test_id": "bike_5", "cmd": ["python3", "scripts/wrap_png.py", "--decoder", "java -jar ./third_party/jxlatte/build/java/jxlatte.jar %s %s --png-depth=16", "./third_party/conformance/testcases/bike_5/input.jxl", "/tmp/bike_599vw6w_s/decoded_image.npy", "--metadata_out", "/tmp/bike_599vw6w_s/meta.json", "--icc_out", "/tmp/bike_599vw6w_s/decoded.icc", "--norender_spotcolors"], "exact_tests": [], "check_meta": {"success": true}, "num_frames": 1, "frame0_compare_npy": {"success": false, "message": "Peak error too large: 0.8182134032249451 > 0.06", "actual_peak_error": 0.8182134032249451, "actual_rmses": [0.0042683912934880636, 0.0042665556598116845, 0.00577220786811097], "actual_rmse": 0.00577220786811097, "rmse_limit": 0.02, "peak_error": 0.06}, "success": false}, {"test_id": "blendmodes_5", "cmd": ["python3", "scripts/wrap_png.py", "--decoder", "java -jar ./third_party/jxlatte/build/java/jxlatte.jar %s %s --png-depth=16", "./third_party/conformance/testcases/blendmodes_5/input.jxl", "/tmp/blendmodes_52986kc_z/decoded_image.npy", "--metadata_out", "/tmp/blendmodes_52986kc_z/meta.json", "--icc_out", "/tmp/blendmodes_52986kc_z/decoded.icc", "--norender_spotcolors"], "exact_tests": [], "check_meta": {"success": true}, "num_frames": 1, "frame0_compare_npy": {"success": true, "actual_peak_error": 7.867813110351562e-06, "actual_rmses": [3.77188927504772e-06, 2.2292555874833813e-06, 4.032985303059025e-06, 3.7838561447190505e-06], "actual_rmse": 4.032985303059025e-06, "rmse_limit": 0.02, "peak_error": 0.06}, "success": true}, {"test_id": "cafe_5", "cmd": ["python3", "scripts/wrap_png.py", "--decoder", "java -jar ./third_party/jxlatte/build/java/jxlatte.jar %s %s --png-depth=16", "./third_party/conformance/testcases/cafe_5/input.jxl", "/tmp/cafe_5iskvlplh/decoded_image.npy", "--metadata_out", "/tmp/cafe_5iskvlplh/meta.json", "--icc_out", "/tmp/cafe_5iskvlplh/decoded.icc", "--norender_spotcolors"], "exact_tests": [], "check_meta": {"success": true}, "num_frames": 1, "frame0_compare_npy": {"success": true, "actual_peak_error": 1.2109113101538282e-05, "actual_rmses": [4.2387401741360555e-06, 4.32861791235331e-06, 4.20111502224329e-06], "actual_rmse": 4.32861791235331e-06, "rmse_limit": 0.02, "peak_error": 0.06}, "success": true}, {"test_id": "delta_palette", "cmd": ["python3", "scripts/wrap_png.py", "--decoder", "java -jar ./third_party/jxlatte/build/java/jxlatte.jar %s %s --png-depth=16", "./third_party/conformance/testcases/delta_palette/input.jxl", "/tmp/delta_paletteli99jwzh/decoded_image.npy", "--metadata_out", "/tmp/delta_paletteli99jwzh/meta.json", "--icc_out", "/tmp/delta_paletteli99jwzh/decoded.icc", "--norender_spotcolors"], "exact_tests": [], "check_meta": {"success": true}, "num_frames": 1, "frame0_compare_npy": {"success": true, "actual_peak_error": 5.960464477539063e-08, "actual_rmses": [3.9620870144973507e-08, 1.7044674575216028e-08, 1.7965775673744027e-08], "actual_rmse": 3.9620870144973507e-08, "rmse_limit": 0.000976562, "peak_error": 0.000976562}, "success": true}, {"test_id": "grayscale_5", "cmd": ["python3", "scripts/wrap_png.py", "--decoder", "java -jar ./third_party/jxlatte/build/java/jxlatte.jar %s %s --png-depth=16", "./third_party/conformance/testcases/grayscale_5/input.jxl", "/tmp/grayscale_5_ue2ksdr/decoded_image.npy", "--metadata_out", "/tmp/grayscale_5_ue2ksdr/meta.json", "--icc_out", "/tmp/grayscale_5_ue2ksdr/decoded.icc", "--norender_spotcolors"], "exact_tests": [], "check_meta": {"success": true}, "num_frames": 1, "frame0_compare_npy": {"success": true, "actual_peak_error": 0.005021035671234131, "actual_rmses": [0.0007927813258076115], "actual_rmse": 0.0007927813258076115, "rmse_limit": 0.02, "peak_error": 0.06}, "success": true}, {"test_id": "grayscale_jpeg_5", "cmd": ["python3", "scripts/wrap_png.py", "--decoder", "java -jar ./third_party/jxlatte/build/java/jxlatte.jar %s %s --png-depth=16", "./third_party/conformance/testcases/grayscale_jpeg_5/input.jxl", "/tmp/grayscale_jpeg_5owgr9x79/decoded_image.npy", "--metadata_out", "/tmp/grayscale_jpeg_5owgr9x79/meta.json", "--icc_out", "/tmp/grayscale_jpeg_5owgr9x79/decoded.icc", "--norender_spotcolors"], "exact_tests": [], "check_meta": {"success": true}, "num_frames": 1, "frame0_compare_npy": {"success": true, "actual_peak_error": 8.429719334568375e-06, "actual_rmses": [5.652372778863025e-06], "actual_rmse": 5.652372778863025e-06, "rmse_limit": 0.02, "peak_error": 0.06}, "success": true}, {"test_id": "grayscale_public_university", "cmd": ["python3", "scripts/wrap_png.py", "--decoder", "java -jar ./third_party/jxlatte/build/java/jxlatte.jar %s %s --png-depth=16", "./third_party/conformance/testcases/grayscale_public_university/input.jxl", "/tmp/grayscale_public_universityvzo440nw/decoded_image.npy", "--metadata_out", "/tmp/grayscale_public_universityvzo440nw/meta.json", "--icc_out", "/tmp/grayscale_public_universityvzo440nw/decoded.icc", "--norender_spotcolors"], "exact_tests": [], "check_meta": {"success": true}, "num_frames": 1, "frame0_compare_npy": {"success": false, "message": "RMSE too large: 0.0026190526970743104 > 0.000976562", "actual_peak_error": 0.06765084971591434, "actual_rmses": [0.0026190526970743104], "actual_rmse": 0.0026190526970743104, "rmse_limit": 0.000976562, "peak_error": 0.000976562}, "success": false}, {"test_id": "lz77_flower", "cmd": ["python3", "scripts/wrap_png.py", "--decoder", "java -jar ./third_party/jxlatte/build/java/jxlatte.jar %s %s --png-depth=16", "./third_party/conformance/testcases/lz77_flower/input.jxl", "/tmp/lz77_flowerj_axf221/decoded_image.npy", "--metadata_out", "/tmp/lz77_flowerj_axf221/meta.json", "--icc_out", "/tmp/lz77_flowerj_axf221/decoded.icc", "--norender_spotcolors"], "exact_tests": [], "check_meta": {"success": true}, "num_frames": 1, "frame0_compare_npy": {"success": true, "actual_peak_error": 0.00012666522525250912, "actual_rmses": [6.510917223782692e-06, 5.924976599483966e-06, 6.847049974151243e-06], "actual_rmse": 6.847049974151243e-06, "rmse_limit": 0.000976562, "peak_error": 0.000976562}, "success": true}, {"test_id": "noise_5", "cmd": ["python3", "scripts/wrap_png.py", "--decoder", "java -jar ./third_party/jxlatte/build/java/jxlatte.jar %s %s --png-depth=16", "./third_party/conformance/testcases/noise_5/input.jxl", "/tmp/noise_57ep7f6yh/decoded_image.npy", "--metadata_out", "/tmp/noise_57ep7f6yh/meta.json", "--icc_out", "/tmp/noise_57ep7f6yh/decoded.icc", "--norender_spotcolors"], "exact_tests": [], "check_meta": {"success": true}, "num_frames": 1, "frame0_compare_npy": {"success": false, "message": "RMSE too large: 0.13319798825124038 > 0.02", "actual_peak_error": 0.5845961570739746, "actual_rmses": [0.13319798825124038, 0.12029648270036844, 0.12169788543200073], "actual_rmse": 0.13319798825124038, "rmse_limit": 0.02, "peak_error": 0.06}, "success": false}, {"test_id": "opsin_inverse_5", "cmd": ["python3", "scripts/wrap_png.py", "--decoder", "java -jar ./third_party/jxlatte/build/java/jxlatte.jar %s %s --png-depth=16", "./third_party/conformance/testcases/opsin_inverse_5/input.jxl", "/tmp/opsin_inverse_5v0rutsfk/decoded_image.npy", "--metadata_out", "/tmp/opsin_inverse_5v0rutsfk/meta.json", "--icc_out", "/tmp/opsin_inverse_5v0rutsfk/decoded.icc", "--norender_spotcolors"], "exact_tests": [], "check_meta": {"success": true}, "num_frames": 1, "frame0_compare_npy": {"success": false, "message": "Peak error too large: 0.06071564927697182 > 0.06", "actual_peak_error": 0.06071564927697182, "actual_rmses": [0.0017267634481585184, 0.0015535989049160891, 0.0018165623020433889], "actual_rmse": 0.0018165623020433889, "rmse_limit": 0.02, "peak_error": 0.06}, "success": false}, {"test_id": "patches_5", "cmd": ["python3", "scripts/wrap_png.py", "--decoder", "java -jar ./third_party/jxlatte/build/java/jxlatte.jar %s %s --png-depth=16", "./third_party/conformance/testcases/patches_5/input.jxl", "/tmp/patches_5e259r7b9/decoded_image.npy", "--metadata_out", "/tmp/patches_5e259r7b9/meta.json", "--icc_out", "/tmp/patches_5e259r7b9/decoded.icc", "--norender_spotcolors"], "exact_tests": [], "check_meta": {"success": true}, "num_frames": 1, "frame0_compare_npy": {"success": false, "message": "Peak error too large: 0.4787491112947464 > 0.06", "actual_peak_error": 0.4787491112947464, "actual_rmses": [0.0019178173509896775, 0.002059223208086752, 0.002315825220237075, 0.0], "actual_rmse": 0.002315825220237075, "rmse_limit": 0.02, "peak_error": 0.06}, "success": false}, {"test_id": "patches_lossless", "cmd": ["python3", "scripts/wrap_png.py", "--decoder", "java -jar ./third_party/jxlatte/build/java/jxlatte.jar %s %s --png-depth=16", "./third_party/conformance/testcases/patches_lossless/input.jxl", "/tmp/patches_lossless1hh12zj4/decoded_image.npy", "--metadata_out", "/tmp/patches_lossless1hh12zj4/meta.json", "--icc_out", "/tmp/patches_lossless1hh12zj4/decoded.icc", "--norender_spotcolors"], "exact_tests": [], "check_meta": {"success": true}, "num_frames": 1, "frame0_compare_npy": {"success": true, "actual_peak_error": 9.536743161842054e-08, "actual_rmses": [1.5903103078540445e-08, 1.65941166607382e-08, 1.6205171946479962e-08, 0.0], "actual_rmse": 1.65941166607382e-08, "rmse_limit": 0.000976562, "peak_error": 0.000976562}, "success": true}, {"test_id": "progressive_5", "cmd": ["python3", "scripts/wrap_png.py", "--decoder", "java -jar ./third_party/jxlatte/build/java/jxlatte.jar %s %s --png-depth=16", "./third_party/conformance/testcases/progressive_5/input.jxl", "/tmp/progressive_5o8ipme0u/decoded_image.npy", "--metadata_out", "/tmp/progressive_5o8ipme0u/meta.json", "--icc_out", "/tmp/progressive_5o8ipme0u/decoded.icc", "--norender_spotcolors"], "exact_tests": [], "check_meta": {"success": true}, "num_frames": 1, "frame0_compare_npy": {"success": false, "message": "RMSE too large: 0.029460123260430373 > 0.02", "actual_peak_error": 0.6859540939331055, "actual_rmses": [0.029460123260430373, 0.027424895497347706, 0.028299447068082975], "actual_rmse": 0.029460123260430373, "rmse_limit": 0.02, "peak_error": 0.06}, "success": false}, {"test_id": "spot", "cmd": ["python3", "scripts/wrap_png.py", "--decoder", "java -jar ./third_party/jxlatte/build/java/jxlatte.jar %s %s --png-depth=16", "./third_party/conformance/testcases/spot/input.jxl", "/tmp/spottbppw5yp/decoded_image.npy", "--metadata_out", "/tmp/spottbppw5yp/meta.json", "--icc_out", "/tmp/spottbppw5yp/decoded.icc", "--norender_spotcolors"], "exact_tests": [], "check_meta": {"success": false, "message": "Metadata: Expected TEST, found "}, "num_frames": 1, "frame0_compare_npy": {"success": false, "message": "Expected shape (1, 400, 600, 6) but found (1, 400, 600, 4)"}, "success": false}, {"test_id": "sunset_logo", "cmd": ["python3", "scripts/wrap_png.py", "--decoder", "java -jar ./third_party/jxlatte/build/java/jxlatte.jar %s %s --png-depth=16", "./third_party/conformance/testcases/sunset_logo/input.jxl", "/tmp/sunset_logo9xj0yj0u/decoded_image.npy", "--metadata_out", "/tmp/sunset_logo9xj0yj0u/meta.json", "--icc_out", "/tmp/sunset_logo9xj0yj0u/decoded.icc", "--norender_spotcolors"], "exact_tests": [], "check_meta": {"success": true}, "num_frames": 1, "frame0_compare_npy": {"success": false, "message": "RMSE too large: 0.4445458145293334 > 0.000244141", "actual_peak_error": 1.0, "actual_rmses": [0.4445458145293334, 0.20642742914645923, 0.37555819445161803, 0.0], "actual_rmse": 0.4445458145293334, "rmse_limit": 0.000244141, "peak_error": 0.000244141}, "success": false}, {"test_id": "upsampling_5", "cmd": ["python3", "scripts/wrap_png.py", "--decoder", "java -jar ./third_party/jxlatte/build/java/jxlatte.jar %s %s --png-depth=16", "./third_party/conformance/testcases/upsampling_5/input.jxl", "/tmp/upsampling_56k42ewj7/decoded_image.npy", "--metadata_out", "/tmp/upsampling_56k42ewj7/meta.json", "--icc_out", "/tmp/upsampling_56k42ewj7/decoded.icc", "--norender_spotcolors"], "exact_tests": [], "check_meta": {"success": true}, "num_frames": 1, "frame0_compare_npy": {"success": false, "message": "Peak error too large: 0.13653773069381714 > 0.06", "actual_peak_error": 0.13653773069381714, "actual_rmses": [0.003378190423517126, 0.0018550277491068885, 0.004403502119801102, 2.25830032267705e-06], "actual_rmse": 0.004403502119801102, "rmse_limit": 0.02, "peak_error": 0.06}, "success": false}]