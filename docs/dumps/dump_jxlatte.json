[{"test_id": "alpha_nonpremultiplied", "cmd": ["python3", "scripts/wrap_png.py", "--decoder", "java -jar ./third_party/jxlatte/build/java/jxlatte.jar %s %s", "./third_party/conformance/testcases/alpha_nonpremultiplied/input.jxl", "/tmp/alpha_nonpremultipliedi3zoq1y2/decoded_image.npy", "--metadata_out", "/tmp/alpha_nonpremultipliedi3zoq1y2/meta.json", "--icc_out", "/tmp/alpha_nonpremultipliedi3zoq1y2/decoded.icc", "--norender_spotcolors"], "exact_tests": [], "check_meta": {"success": true}, "num_frames": 1, "frame0_compare_npy": {"success": true, "actual_peak_error": 7.647764785567723e-06, "actual_rmses": [3.1141718565266937e-06, 4.403638214413188e-06, 4.403638214413188e-06, 4.403771237388232e-06], "actual_rmse": 4.403771237388232e-06, "rmse_limit": 6.1035e-05, "peak_error": 6.1035e-05}, "success": true}, {"test_id": "alpha_triangles", "cmd": ["python3", "scripts/wrap_png.py", "--decoder", "java -jar ./third_party/jxlatte/build/java/jxlatte.jar %s %s", "./third_party/conformance/testcases/alpha_triangles/input.jxl", "/tmp/alpha_trianglesrlelkcsh/decoded_image.npy", "--metadata_out", "/tmp/alpha_trianglesrlelkcsh/meta.json", "--icc_out", "/tmp/alpha_trianglesrlelkcsh/decoded.icc", "--norender_spotcolors"], "exact_tests": [], "check_meta": {"success": true}, "num_frames": 1, "frame0_compare_npy": {"success": true, "actual_peak_error": 7.62939453125e-06, "actual_rmses": [3.8094817427543906e-06, 4.400079979339908e-06, 3.809474253354954e-06, 0.0], "actual_rmse": 4.400079979339908e-06, "rmse_limit": 0.001953125, "peak_error": 0.001953125}, "success": true}, {"test_id": "animation_icos4d_5", "cmd": ["python3", "scripts/wrap_png.py", "--decoder", "java -jar ./third_party/jxlatte/build/java/jxlatte.jar %s %s", "./third_party/conformance/testcases/animation_icos4d_5/input.jxl", "/tmp/animation_icos4d_58t01a5r1/decoded_image.npy", "--metadata_out", "/tmp/animation_icos4d_58t01a5r1/meta.json", "--icc_out", "/tmp/animation_icos4d_58t01a5r1/decoded.icc", "--norender_spotcolors"], "exact_tests": [], "check_meta": {"success": false, "message": "Malformed metadata file"}, "num_frames": 48, "frame0_compare_npy": {"success": false, "message": "RMSE too large: 0.31925084188811453 > 0.02", "actual_peak_error": 1.0, "actual_rmses": [0.159601478277856, 0.23717884824817806, 0.31925084188811453, 0.1206445523284727], "actual_rmse": 0.31925084188811453, "rmse_limit": 0.02, "peak_error": 0.06}, "frame1_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame2_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame3_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame4_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame5_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame6_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame7_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame8_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame9_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame10_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame11_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame12_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame13_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame14_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame15_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame16_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame17_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame18_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame19_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame20_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame21_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame22_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame23_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame24_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame25_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame26_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame27_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame28_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame29_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame30_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame31_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame32_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame33_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame34_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame35_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame36_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame37_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame38_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame39_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame40_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame41_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame42_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame43_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame44_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame45_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame46_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "frame47_compare_npy": {"success": false, "message": "Frame count does not match: ref (48, 128, 128, 4), decoded (1, 128, 128, 4)"}, "success": false}, {"test_id": "animation_newtons_cradle", "cmd": ["python3", "scripts/wrap_png.py", "--decoder", "java -jar ./third_party/jxlatte/build/java/jxlatte.jar %s %s", "./third_party/conformance/testcases/animation_newtons_cradle/input.jxl", "/tmp/animation_newtons_cradlek4vasa50/decoded_image.npy", "--metadata_out", "/tmp/animation_newtons_cradlek4vasa50/meta.json", "--icc_out", "/tmp/animation_newtons_cradlek4vasa50/decoded.icc", "--norender_spotcolors"], "exact_tests": [], "check_meta": {"success": false, "message": "Malformed metadata file"}, "num_frames": 36, "frame0_compare_npy": {"success": false, "message": "RMSE too large: 0.03334243305469183 > 0.000976562", "actual_peak_error": 0.7529412358999252, "actual_rmses": [0.03334243305469183, 0.03333722239524507, 0.0333316691505737, 0.0], "actual_rmse": 0.03334243305469183, "rmse_limit": 0.000976562, "peak_error": 0.000976562}, "frame1_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame2_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame3_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame4_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame5_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame6_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame7_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame8_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame9_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame10_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame11_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame12_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame13_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame14_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame15_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame16_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame17_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame18_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame19_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame20_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame21_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame22_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame23_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame24_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame25_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame26_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame27_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame28_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame29_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame30_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame31_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame32_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame33_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame34_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "frame35_compare_npy": {"success": false, "message": "Frame count does not match: ref (36, 360, 480, 4), decoded (1, 360, 480, 4)"}, "success": false}, {"test_id": "animation_spline_5", "cmd": ["python3", "scripts/wrap_png.py", "--decoder", "java -jar ./third_party/jxlatte/build/java/jxlatte.jar %s %s", "./third_party/conformance/testcases/animation_spline_5/input.jxl", "/tmp/animation_spline_5bfvguj4_/decoded_image.npy", "--metadata_out", "/tmp/animation_spline_5bfvguj4_/meta.json", "--icc_out", "/tmp/animation_spline_5bfvguj4_/decoded.icc", "--norender_spotcolors"], "exact_tests": [], "check_meta": {"success": false, "message": "Malformed metadata file"}, "num_frames": 60, "frame0_compare_npy": {"success": false, "message": "RMSE too large: 0.04572357905715996 > 0.02", "actual_peak_error": 0.9484766721725464, "actual_rmses": [0.04572357905715996, 0.023674184385816987, 0.025560297078310062], "actual_rmse": 0.04572357905715996, "rmse_limit": 0.02, "peak_error": 0.06}, "frame1_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame2_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame3_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame4_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame5_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame6_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame7_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame8_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame9_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame10_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame11_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame12_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame13_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame14_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame15_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame16_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame17_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame18_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame19_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame20_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame21_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame22_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame23_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame24_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame25_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame26_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame27_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame28_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame29_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame30_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame31_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame32_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame33_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame34_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame35_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame36_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame37_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame38_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame39_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame40_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame41_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame42_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame43_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame44_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame45_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame46_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame47_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame48_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame49_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame50_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame51_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame52_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame53_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame54_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame55_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame56_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame57_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame58_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "frame59_compare_npy": {"success": false, "message": "Frame count does not match: ref (60, 320, 320, 3), decoded (1, 320, 320, 3)"}, "success": false}, {"test_id": "bench_oriented_brg_5", "cmd": ["python3", "scripts/wrap_png.py", "--decoder", "java -jar ./third_party/jxlatte/build/java/jxlatte.jar %s %s", "./third_party/conformance/testcases/bench_oriented_brg_5/input.jxl", "/tmp/bench_oriented_brg_5a6b3mr7k/decoded_image.npy", "--metadata_out", "/tmp/bench_oriented_brg_5a6b3mr7k/meta.json", "--icc_out", "/tmp/bench_oriented_brg_5a6b3mr7k/decoded.icc", "--norender_spotcolors"], "exact_tests": [], "check_meta": {"success": true}, "num_frames": 1, "frame0_compare_npy": {"success": true, "actual_peak_error": 0.0019614315500446344, "actual_rmses": [0.0011319172818774162, 0.0011317835006313171, 0.0011313350766386375], "actual_rmse": 0.0011319172818774162, "rmse_limit": 0.02, "peak_error": 0.06}, "success": true}, {"test_id": "bicycles", "cmd": ["python3", "scripts/wrap_png.py", "--decoder", "java -jar ./third_party/jxlatte/build/java/jxlatte.jar %s %s", "./third_party/conformance/testcases/bicycles/input.jxl", "/tmp/bicycleszz41c6ae/decoded_image.npy", "--metadata_out", "/tmp/bicycleszz41c6ae/meta.json", "--icc_out", "/tmp/bicycleszz41c6ae/decoded.icc", "--norender_spotcolors"], "exact_tests": [], "check_meta": {"success": true}, "num_frames": 1, "frame0_compare_npy": {"success": false, "message": "RMSE too large: 0.0011320350426642723 > 0.000976562", "actual_peak_error": 0.0019611120223999023, "actual_rmses": [0.0011278861880324948, 0.0011320350426642723, 0.001128637700979566], "actual_rmse": 0.0011320350426642723, "rmse_limit": 0.000976562, "peak_error": 0.000976562}, "success": false}, {"test_id": "bike_5", "cmd": ["python3", "scripts/wrap_png.py", "--decoder", "java -jar ./third_party/jxlatte/build/java/jxlatte.jar %s %s", "./third_party/conformance/testcases/bike_5/input.jxl", "/tmp/bike_5ydymgxf2/decoded_image.npy", "--metadata_out", "/tmp/bike_5ydymgxf2/meta.json", "--icc_out", "/tmp/bike_5ydymgxf2/decoded.icc", "--norender_spotcolors"], "exact_tests": [], "check_meta": {"success": true}, "num_frames": 1, "frame0_compare_npy": {"success": false, "message": "Peak error too large: 0.19168886542320251 > 0.06", "actual_peak_error": 0.19168886542320251, "actual_rmses": [0.004187044366735491, 0.004184376408235579, 0.0057078974239522795], "actual_rmse": 0.0057078974239522795, "rmse_limit": 0.02, "peak_error": 0.06}, "success": false}, {"test_id": "blendmodes_5", "cmd": ["python3", "scripts/wrap_png.py", "--decoder", "java -jar ./third_party/jxlatte/build/java/jxlatte.jar %s %s", "./third_party/conformance/testcases/blendmodes_5/input.jxl", "/tmp/blendmodes_5zks0t267/decoded_image.npy", "--metadata_out", "/tmp/blendmodes_5zks0t267/meta.json", "--icc_out", "/tmp/blendmodes_5zks0t267/decoded.icc", "--norender_spotcolors"], "exact_tests": [], "check_meta": {"success": true}, "num_frames": 1, "frame0_compare_npy": {"success": true, "actual_peak_error": 7.867813110351562e-06, "actual_rmses": [3.7718892750477206e-06, 2.2292555874833813e-06, 4.032985303059026e-06, 3.7838561447190514e-06], "actual_rmse": 4.032985303059026e-06, "rmse_limit": 0.02, "peak_error": 0.06}, "success": true}, {"test_id": "cafe_5", "cmd": ["python3", "scripts/wrap_png.py", "--decoder", "java -jar ./third_party/jxlatte/build/java/jxlatte.jar %s %s", "./third_party/conformance/testcases/cafe_5/input.jxl", "/tmp/cafe_5nanp1_xe/decoded_image.npy", "--metadata_out", "/tmp/cafe_5nanp1_xe/meta.json", "--icc_out", "/tmp/cafe_5nanp1_xe/decoded.icc", "--norender_spotcolors"], "exact_tests": [], "check_meta": {"success": true}, "num_frames": 1, "frame0_compare_npy": {"success": true, "actual_peak_error": 0.001962320477354784, "actual_rmses": [0.001091795097559128, 0.001104167848696392, 0.0010612265355702038], "actual_rmse": 0.001104167848696392, "rmse_limit": 0.02, "peak_error": 0.06}, "success": true}, {"test_id": "delta_palette", "cmd": ["python3", "scripts/wrap_png.py", "--decoder", "java -jar ./third_party/jxlatte/build/java/jxlatte.jar %s %s", "./third_party/conformance/testcases/delta_palette/input.jxl", "/tmp/delta_palettel3o1amh8/decoded_image.npy", "--metadata_out", "/tmp/delta_palettel3o1amh8/meta.json", "--icc_out", "/tmp/delta_palettel3o1amh8/decoded.icc", "--norender_spotcolors"], "exact_tests": [], "check_meta": {"success": true}, "num_frames": 1, "frame0_compare_npy": {"success": true, "actual_peak_error": 5.960464477539063e-08, "actual_rmses": [3.9620870144973507e-08, 1.7044674575216028e-08, 1.7965775673744027e-08], "actual_rmse": 3.9620870144973507e-08, "rmse_limit": 0.000976562, "peak_error": 0.000976562}, "success": true}, {"test_id": "grayscale_5", "cmd": ["python3", "scripts/wrap_png.py", "--decoder", "java -jar ./third_party/jxlatte/build/java/jxlatte.jar %s %s", "./third_party/conformance/testcases/grayscale_5/input.jxl", "/tmp/grayscale_5xtjy8o9l/decoded_image.npy", "--metadata_out", "/tmp/grayscale_5xtjy8o9l/meta.json", "--icc_out", "/tmp/grayscale_5xtjy8o9l/decoded.icc", "--norender_spotcolors"], "exact_tests": [], "check_meta": {"success": true}, "num_frames": 1, "frame0_compare_npy": {"success": true, "actual_peak_error": 0.008348047733306885, "actual_rmses": [0.0017208486214527838], "actual_rmse": 0.0017208486214527838, "rmse_limit": 0.02, "peak_error": 0.06}, "success": true}, {"test_id": "grayscale_jpeg_5", "cmd": ["python3", "scripts/wrap_png.py", "--decoder", "java -jar ./third_party/jxlatte/build/java/jxlatte.jar %s %s", "./third_party/conformance/testcases/grayscale_jpeg_5/input.jxl", "/tmp/grayscale_jpeg_50dgz8_dk/decoded_image.npy", "--metadata_out", "/tmp/grayscale_jpeg_50dgz8_dk/meta.json", "--icc_out", "/tmp/grayscale_jpeg_50dgz8_dk/decoded.icc", "--norender_spotcolors"], "exact_tests": [], "check_meta": {"success": true}, "num_frames": 1, "frame0_compare_npy": {"success": true, "actual_peak_error": 0.0019605384153478234, "actual_rmses": [0.0007044206868303809], "actual_rmse": 0.0007044206868303809, "rmse_limit": 0.02, "peak_error": 0.06}, "success": true}, {"test_id": "grayscale_public_university", "cmd": ["python3", "scripts/wrap_png.py", "--decoder", "java -jar ./third_party/jxlatte/build/java/jxlatte.jar %s %s", "./third_party/conformance/testcases/grayscale_public_university/input.jxl", "/tmp/grayscale_public_universitymt4mb1gr/decoded_image.npy", "--metadata_out", "/tmp/grayscale_public_universitymt4mb1gr/meta.json", "--icc_out", "/tmp/grayscale_public_universitymt4mb1gr/decoded.icc", "--norender_spotcolors"], "exact_tests": [], "check_meta": {"success": true}, "num_frames": 1, "frame0_compare_npy": {"success": false, "message": "RMSE too large: 0.0028469602743695856 > 0.000976562", "actual_peak_error": 0.06736316093627145, "actual_rmses": [0.0028469602743695856], "actual_rmse": 0.0028469602743695856, "rmse_limit": 0.000976562, "peak_error": 0.000976562}, "success": false}, {"test_id": "lz77_flower", "cmd": ["python3", "scripts/wrap_png.py", "--decoder", "java -jar ./third_party/jxlatte/build/java/jxlatte.jar %s %s", "./third_party/conformance/testcases/lz77_flower/input.jxl", "/tmp/lz77_flower2ufj76rw/decoded_image.npy", "--metadata_out", "/tmp/lz77_flower2ufj76rw/meta.json", "--icc_out", "/tmp/lz77_flower2ufj76rw/decoded.icc", "--norender_spotcolors"], "exact_tests": [], "check_meta": {"success": true}, "num_frames": 1, "frame0_compare_npy": {"success": false, "message": "RMSE too large: 0.0014787714004511191 > 0.000976562", "actual_peak_error": 0.01568627543747425, "actual_rmses": [0.001151254147461804, 0.00110644846783972, 0.0014787714004511191], "actual_rmse": 0.0014787714004511191, "rmse_limit": 0.000976562, "peak_error": 0.000976562}, "success": false}, {"test_id": "noise_5", "cmd": ["python3", "scripts/wrap_png.py", "--decoder", "java -jar ./third_party/jxlatte/build/java/jxlatte.jar %s %s", "./third_party/conformance/testcases/noise_5/input.jxl", "/tmp/noise_5oqy7a7vq/decoded_image.npy", "--metadata_out", "/tmp/noise_5oqy7a7vq/meta.json", "--icc_out", "/tmp/noise_5oqy7a7vq/decoded.icc", "--norender_spotcolors"], "exact_tests": [], "check_meta": {"success": true}, "num_frames": 1, "frame0_compare_npy": {"success": false, "message": "RMSE too large: 0.1332007327813416 > 0.02", "actual_peak_error": 0.5845961570739746, "actual_rmses": [0.1332007327813416, 0.12029880468783256, 0.121701901915001], "actual_rmse": 0.1332007327813416, "rmse_limit": 0.02, "peak_error": 0.06}, "success": false}, {"test_id": "opsin_inverse_5", "cmd": ["python3", "scripts/wrap_png.py", "--decoder", "java -jar ./third_party/jxlatte/build/java/jxlatte.jar %s %s", "./third_party/conformance/testcases/opsin_inverse_5/input.jxl", "/tmp/opsin_inverse_5cjzxdrt_/decoded_image.npy", "--metadata_out", "/tmp/opsin_inverse_5cjzxdrt_/meta.json", "--icc_out", "/tmp/opsin_inverse_5cjzxdrt_/decoded.icc", "--norender_spotcolors"], "exact_tests": [], "check_meta": {"success": true}, "num_frames": 1, "frame0_compare_npy": {"success": true, "actual_peak_error": 0.05882352590560913, "actual_rmses": [0.002039146029540767, 0.0019196403868521562, 0.0020663444493336236], "actual_rmse": 0.0020663444493336236, "rmse_limit": 0.02, "peak_error": 0.06}, "success": true}, {"test_id": "patches_5", "cmd": ["python3", "scripts/wrap_png.py", "--decoder", "java -jar ./third_party/jxlatte/build/java/jxlatte.jar %s %s", "./third_party/conformance/testcases/patches_5/input.jxl", "/tmp/patches_5l9pwl5tf/decoded_image.npy", "--metadata_out", "/tmp/patches_5l9pwl5tf/meta.json", "--icc_out", "/tmp/patches_5l9pwl5tf/decoded.icc", "--norender_spotcolors"], "exact_tests": [], "check_meta": {"success": true}, "num_frames": 1, "frame0_compare_npy": {"success": false, "message": "Peak error too large: 0.0904456377029419 > 0.06", "actual_peak_error": 0.0904456377029419, "actual_rmses": [0.00132465221630659, 0.0014123176935939856, 0.0016108731459775099, 0.0], "actual_rmse": 0.0016108731459775099, "rmse_limit": 0.02, "peak_error": 0.06}, "success": false}, {"test_id": "patches_lossless", "cmd": ["python3", "scripts/wrap_png.py", "--decoder", "java -jar ./third_party/jxlatte/build/java/jxlatte.jar %s %s", "./third_party/conformance/testcases/patches_lossless/input.jxl", "/tmp/patches_lossless38dkuov5/decoded_image.npy", "--metadata_out", "/tmp/patches_lossless38dkuov5/meta.json", "--icc_out", "/tmp/patches_lossless38dkuov5/decoded.icc", "--norender_spotcolors"], "exact_tests": [], "check_meta": {"success": true}, "num_frames": 1, "frame0_compare_npy": {"success": true, "actual_peak_error": 9.536743161842054e-08, "actual_rmses": [1.590310307854045e-08, 1.6594116660738192e-08, 1.6205171946479956e-08, 0.0], "actual_rmse": 1.6594116660738192e-08, "rmse_limit": 0.000976562, "peak_error": 0.000976562}, "success": true}, {"test_id": "progressive_5", "cmd": ["python3", "scripts/wrap_png.py", "--decoder", "java -jar ./third_party/jxlatte/build/java/jxlatte.jar %s %s", "./third_party/conformance/testcases/progressive_5/input.jxl", "/tmp/progressive_5uxl415ep/decoded_image.npy", "--metadata_out", "/tmp/progressive_5uxl415ep/meta.json", "--icc_out", "/tmp/progressive_5uxl415ep/decoded.icc", "--norender_spotcolors"], "exact_tests": [], "check_meta": {"success": true}, "num_frames": 1, "frame0_compare_npy": {"success": false, "message": "RMSE too large: 0.029487145669075124 > 0.02", "actual_peak_error": 0.6860070824623108, "actual_rmses": [0.029487145669075124, 0.027440801053167818, 0.02830843838086543], "actual_rmse": 0.029487145669075124, "rmse_limit": 0.02, "peak_error": 0.06}, "success": false}, {"test_id": "spot", "cmd": ["python3", "scripts/wrap_png.py", "--decoder", "java -jar ./third_party/jxlatte/build/java/jxlatte.jar %s %s", "./third_party/conformance/testcases/spot/input.jxl", "/tmp/spotw4pfkqab/decoded_image.npy", "--metadata_out", "/tmp/spotw4pfkqab/meta.json", "--icc_out", "/tmp/spotw4pfkqab/decoded.icc", "--norender_spotcolors"], "exact_tests": [], "check_meta": {"success": false, "message": "Metadata: Expected TEST, found "}, "num_frames": 1, "frame0_compare_npy": {"success": false, "message": "Expected shape (1, 400, 600, 6) but found (1, 400, 600, 4)"}, "success": false}, {"test_id": "sunset_logo", "cmd": ["python3", "scripts/wrap_png.py", "--decoder", "java -jar ./third_party/jxlatte/build/java/jxlatte.jar %s %s", "./third_party/conformance/testcases/sunset_logo/input.jxl", "/tmp/sunset_logox01cuduo/decoded_image.npy", "--metadata_out", "/tmp/sunset_logox01cuduo/meta.json", "--icc_out", "/tmp/sunset_logox01cuduo/decoded.icc", "--norender_spotcolors"], "exact_tests": [], "check_meta": {"success": true}, "num_frames": 1, "frame0_compare_npy": {"success": false, "message": "RMSE too large: 0.44454581452933334 > 0.000244141", "actual_peak_error": 1.0, "actual_rmses": [0.44454581452933334, 0.20642742914645926, 0.37555819445161803, 0.0], "actual_rmse": 0.44454581452933334, "rmse_limit": 0.000244141, "peak_error": 0.000244141}, "success": false}, {"test_id": "upsampling_5", "cmd": ["python3", "scripts/wrap_png.py", "--decoder", "java -jar ./third_party/jxlatte/build/java/jxlatte.jar %s %s", "./third_party/conformance/testcases/upsampling_5/input.jxl", "/tmp/upsampling_54tepbb22/decoded_image.npy", "--metadata_out", "/tmp/upsampling_54tepbb22/meta.json", "--icc_out", "/tmp/upsampling_54tepbb22/decoded.icc", "--norender_spotcolors"], "exact_tests": [], "check_meta": {"success": true}, "num_frames": 1, "frame0_compare_npy": {"success": false, "message": "Peak error too large: 0.13725490868091583 > 0.06", "actual_peak_error": 0.13725490868091583, "actual_rmses": [0.0035231309191841986, 0.002109419441326963, 0.004518404250350942, 0.0005761933028279694], "actual_rmse": 0.004518404250350942, "rmse_limit": 0.02, "peak_error": 0.06}, "success": false}]